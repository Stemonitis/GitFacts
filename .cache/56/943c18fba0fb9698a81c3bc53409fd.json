{"id":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","dependencies":[{"name":"/home/mysh/програмування/GitFacts/package.json","includedInParent":true,"mtime":1611418560078},{"name":"/home/mysh/програмування/GitFacts/node_modules/@babel/types/package.json","includedInParent":true,"mtime":1605524770825},{"name":"../retrievers/getBindingIdentifiers","loc":{"line":8,"column":60},"parent":"/home/mysh/програмування/GitFacts/node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","resolved":"/home/mysh/програмування/GitFacts/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js"},{"name":"../validators/generated","loc":{"line":10,"column":25},"parent":"/home/mysh/програмування/GitFacts/node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","resolved":"/home/mysh/програмування/GitFacts/node_modules/@babel/types/lib/validators/generated/index.js"},{"name":"../builders/generated","loc":{"line":12,"column":26},"parent":"/home/mysh/програмування/GitFacts/node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","resolved":"/home/mysh/програмування/GitFacts/node_modules/@babel/types/lib/builders/generated/index.js"},{"name":"../clone/cloneNode","loc":{"line":14,"column":48},"parent":"/home/mysh/програмування/GitFacts/node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","resolved":"/home/mysh/програмування/GitFacts/node_modules/@babel/types/lib/clone/cloneNode.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = gatherSequenceExpressions;\n\nvar _getBindingIdentifiers = _interopRequireDefault(require(\"../retrievers/getBindingIdentifiers\"));\n\nvar _generated = require(\"../validators/generated\");\n\nvar _generated2 = require(\"../builders/generated\");\n\nvar _cloneNode = _interopRequireDefault(require(\"../clone/cloneNode\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction gatherSequenceExpressions(nodes, scope, declars) {\n  const exprs = [];\n  let ensureLastUndefined = true;\n\n  for (const node of nodes) {\n    if (!(0, _generated.isEmptyStatement)(node)) {\n      ensureLastUndefined = false;\n    }\n\n    if ((0, _generated.isExpression)(node)) {\n      exprs.push(node);\n    } else if ((0, _generated.isExpressionStatement)(node)) {\n      exprs.push(node.expression);\n    } else if ((0, _generated.isVariableDeclaration)(node)) {\n      if (node.kind !== \"var\") return;\n\n      for (const declar of node.declarations) {\n        const bindings = (0, _getBindingIdentifiers.default)(declar);\n\n        for (const key of Object.keys(bindings)) {\n          declars.push({\n            kind: node.kind,\n            id: (0, _cloneNode.default)(bindings[key])\n          });\n        }\n\n        if (declar.init) {\n          exprs.push((0, _generated2.assignmentExpression)(\"=\", declar.id, declar.init));\n        }\n      }\n\n      ensureLastUndefined = true;\n    } else if ((0, _generated.isIfStatement)(node)) {\n      const consequent = node.consequent ? gatherSequenceExpressions([node.consequent], scope, declars) : scope.buildUndefinedNode();\n      const alternate = node.alternate ? gatherSequenceExpressions([node.alternate], scope, declars) : scope.buildUndefinedNode();\n      if (!consequent || !alternate) return;\n      exprs.push((0, _generated2.conditionalExpression)(node.test, consequent, alternate));\n    } else if ((0, _generated.isBlockStatement)(node)) {\n      const body = gatherSequenceExpressions(node.body, scope, declars);\n      if (!body) return;\n      exprs.push(body);\n    } else if ((0, _generated.isEmptyStatement)(node)) {\n      if (nodes.indexOf(node) === 0) {\n        ensureLastUndefined = true;\n      }\n    } else {\n      return;\n    }\n  }\n\n  if (ensureLastUndefined) {\n    exprs.push(scope.buildUndefinedNode());\n  }\n\n  if (exprs.length === 1) {\n    return exprs[0];\n  } else {\n    return (0, _generated2.sequenceExpression)(exprs);\n  }\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}}],"sources":{"../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = gatherSequenceExpressions;\n\nvar _getBindingIdentifiers = _interopRequireDefault(require(\"../retrievers/getBindingIdentifiers\"));\n\nvar _generated = require(\"../validators/generated\");\n\nvar _generated2 = require(\"../builders/generated\");\n\nvar _cloneNode = _interopRequireDefault(require(\"../clone/cloneNode\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction gatherSequenceExpressions(nodes, scope, declars) {\n  const exprs = [];\n  let ensureLastUndefined = true;\n\n  for (const node of nodes) {\n    if (!(0, _generated.isEmptyStatement)(node)) {\n      ensureLastUndefined = false;\n    }\n\n    if ((0, _generated.isExpression)(node)) {\n      exprs.push(node);\n    } else if ((0, _generated.isExpressionStatement)(node)) {\n      exprs.push(node.expression);\n    } else if ((0, _generated.isVariableDeclaration)(node)) {\n      if (node.kind !== \"var\") return;\n\n      for (const declar of node.declarations) {\n        const bindings = (0, _getBindingIdentifiers.default)(declar);\n\n        for (const key of Object.keys(bindings)) {\n          declars.push({\n            kind: node.kind,\n            id: (0, _cloneNode.default)(bindings[key])\n          });\n        }\n\n        if (declar.init) {\n          exprs.push((0, _generated2.assignmentExpression)(\"=\", declar.id, declar.init));\n        }\n      }\n\n      ensureLastUndefined = true;\n    } else if ((0, _generated.isIfStatement)(node)) {\n      const consequent = node.consequent ? gatherSequenceExpressions([node.consequent], scope, declars) : scope.buildUndefinedNode();\n      const alternate = node.alternate ? gatherSequenceExpressions([node.alternate], scope, declars) : scope.buildUndefinedNode();\n      if (!consequent || !alternate) return;\n      exprs.push((0, _generated2.conditionalExpression)(node.test, consequent, alternate));\n    } else if ((0, _generated.isBlockStatement)(node)) {\n      const body = gatherSequenceExpressions(node.body, scope, declars);\n      if (!body) return;\n      exprs.push(body);\n    } else if ((0, _generated.isEmptyStatement)(node)) {\n      if (nodes.indexOf(node) === 0) {\n        ensureLastUndefined = true;\n      }\n    } else {\n      return;\n    }\n  }\n\n  if (ensureLastUndefined) {\n    exprs.push(scope.buildUndefinedNode());\n  }\n\n  if (exprs.length === 1) {\n    return exprs[0];\n  } else {\n    return (0, _generated2.sequenceExpression)(exprs);\n  }\n}"},"lineCount":77}},"error":null,"hash":"62c76df51c4448809c9ee9b57905f3c6","cacheData":{"env":{}}}