{"id":"../node_modules/@apollo/client/cache/core/types/Cache.js","dependencies":[{"name":"/home/mysh/програмування/GitFacts/node_modules/@apollo/client/cache/core/types/Cache.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/mysh/програмування/GitFacts/package.json","includedInParent":true,"mtime":1612841288770},{"name":"/home/mysh/програмування/GitFacts/node_modules/@apollo/client/cache/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Cache = void 0;\nvar Cache;\nexports.Cache = Cache;\n\n(function (Cache) {})(Cache || (exports.Cache = Cache = {}));"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/cache/core/types/Cache.ts","name":null,"original":{"line":4,"column":6},"generated":{"line":7,"column":0}},{"source":"../../../../src/cache/core/types/Cache.ts","name":null,"original":{"line":4,"column":17},"generated":{"line":7,"column":4}},{"source":"../../../../src/cache/core/types/Cache.ts","name":null,"original":{"line":4,"column":6},"generated":{"line":7,"column":9}},{"source":"../../../../src/cache/core/types/Cache.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../src/cache/core/types/Cache.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":10,"column":1}},{"source":"../../../../src/cache/core/types/Cache.ts","name":null,"original":{"line":4,"column":17},"generated":{"line":10,"column":11}},{"source":"../../../../src/cache/core/types/Cache.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":10,"column":16}},{"source":"../../../../src/cache/core/types/Cache.ts","name":null,"original":{"line":4,"column":22},"generated":{"line":10,"column":18}},{"source":"../../../../src/cache/core/types/Cache.ts","name":null,"original":{"line":53,"column":1},"generated":{"line":10,"column":19}},{"source":"../../../../src/cache/core/types/Cache.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":10,"column":20}},{"source":"../../../../src/cache/core/types/Cache.ts","name":null,"original":{"line":4,"column":17},"generated":{"line":10,"column":22}},{"source":"../../../../src/cache/core/types/Cache.ts","name":null,"original":{"line":4,"column":22},"generated":{"line":10,"column":27}},{"source":"../../../../src/cache/core/types/Cache.ts","name":null,"original":{"line":4,"column":17},"generated":{"line":10,"column":48}},{"source":"../../../../src/cache/core/types/Cache.ts","name":null,"original":{"line":4,"column":22},"generated":{"line":10,"column":53}},{"source":"../../../../src/cache/core/types/Cache.ts","name":null,"original":{"line":4,"column":22},"generated":{"line":10,"column":56}},{"source":"../../../../src/cache/core/types/Cache.ts","name":null,"original":{"line":4,"column":22},"generated":{"line":10,"column":58}},{"source":"../../../../src/cache/core/types/Cache.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":10,"column":59}}],"sources":{"../../../../src/cache/core/types/Cache.ts":"import { DataProxy } from './DataProxy';\nimport { Modifier, Modifiers } from './common';\n\nexport namespace Cache {\n  export type WatchCallback = (diff: Cache.DiffResult<any>) => void;\n\n  export interface ReadOptions<TVariables = any, TData = any>\n    extends DataProxy.Query<TVariables, TData> {\n    rootId?: string;\n    previousResult?: any;\n    optimistic: boolean;\n    returnPartialData?: boolean;\n  }\n\n  export interface WriteOptions<TResult = any, TVariables = any>\n    extends DataProxy.Query<TVariables, TResult> {\n    dataId?: string;\n    result: TResult;\n    broadcast?: boolean;\n  }\n\n  export interface DiffOptions extends ReadOptions {\n    // The DiffOptions interface is currently just an alias for\n    // ReadOptions, though DiffOptions used to be responsible for\n    // declaring the returnPartialData option.\n  }\n\n  export interface WatchOptions extends ReadOptions {\n    immediate?: boolean;\n    callback: WatchCallback;\n  }\n\n  export interface EvictOptions {\n    id?: string;\n    fieldName?: string;\n    args?: Record<string, any>;\n    broadcast?: boolean;\n  }\n\n  export interface ModifyOptions {\n    id?: string;\n    fields: Modifiers | Modifier<any>;\n    optimistic?: boolean;\n    broadcast?: boolean;\n  }\n\n  export import DiffResult = DataProxy.DiffResult;\n  export import ReadQueryOptions = DataProxy.ReadQueryOptions;\n  export import ReadFragmentOptions = DataProxy.ReadFragmentOptions;\n  export import WriteQueryOptions = DataProxy.WriteQueryOptions;\n  export import WriteFragmentOptions = DataProxy.WriteFragmentOptions;\n  export import Fragment = DataProxy.Fragment;\n}\n"},"lineCount":null}},"error":null,"hash":"824357ea97105dde795f8d6e7107bbc1","cacheData":{"env":{}}}