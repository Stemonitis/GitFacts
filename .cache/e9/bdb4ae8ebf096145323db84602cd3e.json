{"id":"../node_modules/@babel/types/lib/converters/toExpression.js","dependencies":[{"name":"/home/mysh/програмування/GitFacts/package.json","includedInParent":true,"mtime":1611418560078},{"name":"/home/mysh/програмування/GitFacts/node_modules/@babel/types/package.json","includedInParent":true,"mtime":1605524770825},{"name":"../validators/generated","loc":{"line":8,"column":25},"parent":"/home/mysh/програмування/GitFacts/node_modules/@babel/types/lib/converters/toExpression.js","resolved":"/home/mysh/програмування/GitFacts/node_modules/@babel/types/lib/validators/generated/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toExpression;\n\nvar _generated = require(\"../validators/generated\");\n\nfunction toExpression(node) {\n  if ((0, _generated.isExpressionStatement)(node)) {\n    node = node.expression;\n  }\n\n  if ((0, _generated.isExpression)(node)) {\n    return node;\n  }\n\n  if ((0, _generated.isClass)(node)) {\n    node.type = \"ClassExpression\";\n  } else if ((0, _generated.isFunction)(node)) {\n    node.type = \"FunctionExpression\";\n  }\n\n  if (!(0, _generated.isExpression)(node)) {\n    throw new Error(`cannot turn ${node.type} to an expression`);\n  }\n\n  return node;\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/@babel/types/lib/converters/toExpression.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/toExpression.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/toExpression.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/toExpression.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/toExpression.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/toExpression.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/toExpression.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/toExpression.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/toExpression.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/toExpression.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/toExpression.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/toExpression.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/toExpression.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/toExpression.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/toExpression.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/toExpression.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/toExpression.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/toExpression.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/toExpression.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/toExpression.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/toExpression.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/toExpression.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/toExpression.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/toExpression.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/toExpression.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/toExpression.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/toExpression.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/toExpression.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/toExpression.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/@babel/types/lib/converters/toExpression.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}}],"sources":{"../node_modules/@babel/types/lib/converters/toExpression.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toExpression;\n\nvar _generated = require(\"../validators/generated\");\n\nfunction toExpression(node) {\n  if ((0, _generated.isExpressionStatement)(node)) {\n    node = node.expression;\n  }\n\n  if ((0, _generated.isExpression)(node)) {\n    return node;\n  }\n\n  if ((0, _generated.isClass)(node)) {\n    node.type = \"ClassExpression\";\n  } else if ((0, _generated.isFunction)(node)) {\n    node.type = \"FunctionExpression\";\n  }\n\n  if (!(0, _generated.isExpression)(node)) {\n    throw new Error(`cannot turn ${node.type} to an expression`);\n  }\n\n  return node;\n}"},"lineCount":30}},"error":null,"hash":"12cb5ffce02e017fc4d21dc2e0723e3d","cacheData":{"env":{}}}