{"id":"../node_modules/@apollo/client/link/core/types.js","dependencies":[{"name":"/home/mysh/програмування/GitFacts/node_modules/@apollo/client/link/core/types.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/mysh/програмування/GitFacts/package.json","includedInParent":true,"mtime":1616015438541},{"name":"/home/mysh/програмування/GitFacts/node_modules/@apollo/client/link/core/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":";\n"},"sourceMaps":{"js":{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/link/core/types.ts"],"names":[],"mappings":"AA8BC,CAAC","sourcesContent":["import { DocumentNode, ExecutionResult } from 'graphql';\nexport { DocumentNode };\n\nimport { Observable } from '../../utilities';\n\nexport interface GraphQLRequest {\n  query: DocumentNode;\n  variables?: Record<string, any>;\n  operationName?: string;\n  context?: Record<string, any>;\n  extensions?: Record<string, any>;\n}\n\nexport interface Operation {\n  query: DocumentNode;\n  variables: Record<string, any>;\n  operationName: string;\n  extensions: Record<string, any>;\n  setContext: (context: Record<string, any>) => Record<string, any>;\n  getContext: () => Record<string, any>;\n}\n\nexport interface FetchResult<\n  TData = { [key: string]: any },\n  C = Record<string, any>,\n  E = Record<string, any>\n> extends ExecutionResult {\n  data?: TData | null;\n  extensions?: E;\n  context?: C;\n};\n\nexport type NextLink = (operation: Operation) => Observable<FetchResult>;\n\nexport type RequestHandler = (\n  operation: Operation,\n  forward: NextLink,\n) => Observable<FetchResult> | null;\n"]}},"error":null,"hash":"cddf4ae9b3de5e44a3557e6a1a4fb8d1","cacheData":{"env":{}}}