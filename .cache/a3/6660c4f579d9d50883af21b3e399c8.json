{"id":"../node_modules/@apollo/client/react/hooks/useLazyQuery.js","dependencies":[{"name":"/home/mysh/програмування/GitFacts/node_modules/@apollo/client/react/hooks/useLazyQuery.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/mysh/програмування/GitFacts/package.json","includedInParent":true,"mtime":1616015438541},{"name":"/home/mysh/програмування/GitFacts/node_modules/@apollo/client/react/hooks/package.json","includedInParent":true,"mtime":499162500000},{"name":"./utils/useBaseQuery.js","loc":{"line":1,"column":29},"parent":"/home/mysh/програмування/GitFacts/node_modules/@apollo/client/react/hooks/useLazyQuery.js","resolved":"/home/mysh/програмування/GitFacts/node_modules/@apollo/client/react/hooks/utils/useBaseQuery.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useLazyQuery = useLazyQuery;\n\nvar _useBaseQuery = require(\"./utils/useBaseQuery.js\");\n\nfunction useLazyQuery(query, options) {\n  return (0, _useBaseQuery.useBaseQuery)(query, options, true);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/react/hooks/useLazyQuery.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/react/hooks/useLazyQuery.ts","name":null,"original":{"line":8,"column":6},"generated":{"line":10,"column":0}},{"source":"../../../src/react/hooks/useLazyQuery.ts","name":null,"original":{"line":8,"column":16},"generated":{"line":10,"column":9}},{"source":"../../../src/react/hooks/useLazyQuery.ts","name":null,"original":{"line":8,"column":6},"generated":{"line":10,"column":21}},{"source":"../../../src/react/hooks/useLazyQuery.ts","name":null,"original":{"line":9,"column":2},"generated":{"line":10,"column":22}},{"source":"../../../src/react/hooks/useLazyQuery.ts","name":null,"original":{"line":8,"column":6},"generated":{"line":10,"column":27}},{"source":"../../../src/react/hooks/useLazyQuery.ts","name":null,"original":{"line":10,"column":2},"generated":{"line":10,"column":29}},{"source":"../../../src/react/hooks/useLazyQuery.ts","name":null,"original":{"line":8,"column":6},"generated":{"line":10,"column":36}},{"source":"../../../src/react/hooks/useLazyQuery.ts","name":null,"original":{"line":10,"column":51},"generated":{"line":10,"column":38}},{"source":"../../../src/react/hooks/useLazyQuery.ts","name":null,"original":{"line":12,"column":2},"generated":{"line":11,"column":0}},{"source":"../../../src/react/hooks/useLazyQuery.ts","name":null,"original":{"line":12,"column":9},"generated":{"line":11,"column":9}},{"source":"../../../src/react/hooks/useLazyQuery.ts","name":null,"original":{"line":12,"column":41},"generated":{"line":11,"column":41}},{"source":"../../../src/react/hooks/useLazyQuery.ts","name":null,"original":{"line":12,"column":9},"generated":{"line":11,"column":46}},{"source":"../../../src/react/hooks/useLazyQuery.ts","name":null,"original":{"line":12,"column":48},"generated":{"line":11,"column":48}},{"source":"../../../src/react/hooks/useLazyQuery.ts","name":null,"original":{"line":12,"column":9},"generated":{"line":11,"column":55}},{"source":"../../../src/react/hooks/useLazyQuery.ts","name":null,"original":{"line":12,"column":57},"generated":{"line":11,"column":57}},{"source":"../../../src/react/hooks/useLazyQuery.ts","name":null,"original":{"line":12,"column":9},"generated":{"line":11,"column":61}},{"source":"../../../src/react/hooks/useLazyQuery.ts","name":null,"original":{"line":12,"column":2},"generated":{"line":11,"column":62}},{"source":"../../../src/react/hooks/useLazyQuery.ts","name":null,"original":{"line":16,"column":1},"generated":{"line":12,"column":0}}],"sources":{"../../../src/react/hooks/useLazyQuery.ts":"import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { LazyQueryHookOptions, QueryTuple } from '../types/types';\nimport { useBaseQuery } from './utils/useBaseQuery';\nimport { OperationVariables } from '../../core';\n\nexport function useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, true) as QueryTuple<\n    TData,\n    TVariables\n  >;\n}\n"},"lineCount":null}},"error":null,"hash":"b5a61cd18c79ee2168766fc1b6f6d813","cacheData":{"env":{}}}